{"version":3,"sources":["components/ConfigScreen.tsx","components/EntryEditor.tsx","components/Page.tsx","components/Sidebar.tsx","components/Field.tsx","components/Dialog.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","renderFields","renderedFields","map","field","localizedFieldData","entry","fields","getForLocale","locales","default","fieldEditorInterface","editor","editorInterface","controls","find","fieldId","id","fieldTypeName","contentType","fieldData","name","widgetId","fieldSdk","instance","settings","Entry","controlFieldId","control","findControlField","controlField","informationFields","filter","findInformationFields","defaultControlFieldValue","getValue","useState","controlFieldValue","updateControlFieldValue","useEffect","onValueChanged","value","conditionsOfMainField","validations","conditionalFieldsData","reduce","obj","condition","idsOfConditionalField","controlConditionSettingsString","controlConditionSettings","split","includes","style","maxWidth","flexDirection","marginTop","marginBottom","Page","Sidebar","contentField","typeValue","setBlogText","detach","type","renderCorrectTypeDescription","Field","window","startAutoResizer","Dialog","JSON","stringify","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","LOCATION_ENTRY_EDITOR","EntryEditor","LOCATION_DIALOG","LOCATION_ENTRY_SIDEBAR","LOCATION_PAGE","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.6f96ac88.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from '@contentful/app-sdk';\nimport { Heading, Subheading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>Conditional fields application</Heading>\n          <Subheading>App Config</Subheading>\n          <Paragraph>Welcome to your contentful app. This is your config page.</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React, {useEffect, useState} from 'react';\nimport { Paragraph, Flex } from '@contentful/forma-36-react-components';\nimport { EditorExtensionSDK } from '@contentful/app-sdk';\nimport {Field as BaseField, FieldWrapper} from \"@contentful/default-field-editors\";\nimport { FieldExtensionSDK } from \"@contentful/app-sdk\";\nimport 'codemirror/lib/codemirror.css';\nimport '@contentful/forma-36-react-components/dist/styles.css';\n\ninterface EditorProps {\n  sdk: EditorExtensionSDK;\n}\n\ninterface EditorInterfaceControl {\n    settings: object\n}\n\ntype fieldType = string;\n\nconst CONDITION_SETTING = \"sectionTypes\";\nconst CONTROL_FIELD_PARAMETER = \"controlField\";\nconst INFORMATION_FIELD_PARAMETER = \"informationField\";\n\nconst findControlField = (sdk: EditorProps[\"sdk\"]) => {\n    // TODO: add more conditions (only one control, only specific type)\n    const controlFieldData = sdk.editor.editorInterface?.controls?.find(\n        // @ts-ignore\n        (control: EditorInterfaceControl) => control.settings?.[CONTROL_FIELD_PARAMETER]\n    );\n\n    return controlFieldData;\n}\n\nconst findInformationFields = (sdk: EditorProps[\"sdk\"]) => {\n    const informationFields = sdk.editor.editorInterface?.controls?.filter(\n        // @ts-ignore\n        control => control.settings?.[INFORMATION_FIELD_PARAMETER]\n    );\n\n    if (!informationFields) {\n        return null;\n    }\n\n    return informationFields.map(field => field.fieldId);\n}\n\nconst renderFields = (renderedFields: Array<string>, sdk: EditorProps[\"sdk\"]) => {\n    return renderedFields.map(field => {\n        const fieldData = sdk.entry.fields[field];\n        const localizedFieldData = fieldData.getForLocale(sdk.locales.default);\n\n        const fieldEditorInterface = sdk.editor.editorInterface?.controls?.find(\n            // @ts-ignore\n            ({fieldId}) => fieldId === localizedFieldData.id\n        );\n// @ts-ignore\n        const fieldTypeName = sdk.contentType.fields.find((fieldData: object) => fieldData.id === field).name;\n\n        const widgetId = fieldEditorInterface?.widgetId ?? '';\n\n        const fieldSdk: FieldExtensionSDK = {\n            ...sdk,\n            field: localizedFieldData,\n            locales: sdk.locales,\n            parameters: {\n                ...sdk.parameters,\n                instance: {\n                    ...sdk.parameters.instance,\n                    ...fieldEditorInterface?.settings,\n                },\n            },\n        } as any;\n\n        return (\n            <FieldWrapper name={fieldTypeName} sdk={fieldSdk}>\n                <BaseField sdk={fieldSdk} widgetId={widgetId}/>\n            </FieldWrapper>\n        )\n    })\n}\n\nconst Entry = (props: EditorProps) => {\n    const { sdk } = props;\n    {/*  @ts-ignore*/}\n    const controlFieldId: fieldType = findControlField(sdk)?.fieldId;\n    {/*  @ts-ignore*/}\n    const controlField = sdk.entry.fields[controlFieldId];\n    const informationFields = findInformationFields(sdk);\n\n    const defaultControlFieldValue = controlField?.getValue();\n\n    const [controlFieldValue, updateControlFieldValue] = useState(defaultControlFieldValue);\n\n    useEffect(() => {\n        controlField?.onValueChanged((value: any) => updateControlFieldValue(value));\n    }, [controlField])\n\n\n    {/*  @ts-ignore*/}\n    const conditionsOfMainField: Array<string> = sdk.entry.fields[controlFieldId]?.validations[0][\"in\"];\n    {/*  @ts-ignore*/}\n    const controls: Array<any> = sdk.editor.editorInterface.controls;\n\n    const conditionalFieldsData = conditionsOfMainField?.reduce((obj: object, condition: string) => {\n        const fieldsWithCondition = controls.filter(control => {\n            const controlConditionSettingsString: string = control.settings?.[CONDITION_SETTING];\n            const controlConditionSettings: Array<string> = controlConditionSettingsString?.split(\", \");\n            return controlConditionSettings?.includes(condition);\n        });\n        const idsOfConditionalField = fieldsWithCondition.map(field => field.fieldId);\n\n        return {\n            ...obj,\n            [condition]: idsOfConditionalField\n        }\n    }, {})\n\n    return (\n      <div style={{maxWidth: '95%', margin: \"10px auto\"}}>\n        {informationFields && renderFields(informationFields, sdk)}\n        {controlFieldId ?\n            renderFields([controlFieldId], sdk) :\n            <Paragraph>Expect one control field</Paragraph>\n        }\n        {controlFieldValue && (\n            <Flex flexDirection=\"column\" marginTop=\"spacingL\" marginBottom=\"spacingXl\">\n              <Paragraph>{`Fields for ${controlFieldId} ${controlFieldValue}:`}</Paragraph>\n              {renderFields(conditionalFieldsData[controlFieldValue], sdk)}\n            </Flex>\n        )}\n      </div>\n  )\n};\n\nexport default Entry;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { PageExtensionSDK } from '@contentful/app-sdk';\n\ninterface PageProps {\n  sdk: PageExtensionSDK;\n}\n\nconst Page = (props: PageProps) => {\n  return <Paragraph>Hello Page Component</Paragraph>;\n};\n\nexport default Page;\n","import React, {useState, useEffect} from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { SidebarExtensionSDK } from '@contentful/app-sdk';\nimport {Heading} from \"@contentful/forma-36-react-components\";\n\ninterface SidebarProps {\n  sdk: SidebarExtensionSDK;\n}\n\nconst CONTENT_FIELD_ID = 'type';\n\nconst Sidebar = (props: SidebarProps) => {\n  const { sdk } = props;\n  const contentField = sdk.entry.fields[CONTENT_FIELD_ID];\n\n  const [typeValue, setBlogText] = useState(contentField.getValue());\n\n  // Listen for onChange events and update the value\n  useEffect(() => {\n    const detach = contentField.onValueChanged((value) => {\n      setBlogText(value);\n    });\n    return () => detach();\n  }, [contentField]);\n\n  const renderCorrectTypeDescription = (type: string) => {\n    switch (type) {\n      case 'one': return 'This section used with one fields:';\n      case 'two': return 'This section used with two fields:';\n      default: return null;\n    }\n  }\n\n  return (\n      <>\n        <Heading>{typeValue ? typeValue : 'Choose section type'}</Heading>\n        {typeValue && <Paragraph>{renderCorrectTypeDescription(typeValue)}</Paragraph>}\n      </>\n  );\n};\n\nexport default Sidebar;\n","import React, {useEffect, useState} from 'react';\nimport { Paragraph, DisplayText } from '@contentful/forma-36-react-components';\nimport { FieldExtensionSDK } from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport { SingleLineEditor } from '@contentful/field-editor-single-line';\n// import { RadioEditor } from '@contentful/field-editor-radio';\nimport { MultipleEntryReferenceEditor } from '@contentful/field-editor-reference';\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst CONTENT_FIELD_ID = 'type';\n\nconst Field = (props: FieldProps) => {\n  const { sdk } = props;\n  const contentField = sdk.entry.fields[CONTENT_FIELD_ID];\n  const [typeValue, setBlogText] = useState(contentField.getValue());\n\n    const fieldSdk = sdk as FieldExtensionSDK;\n    fieldSdk.window.startAutoResizer();\n\n  useEffect(() => {\n    const detach = contentField.onValueChanged((value) => {\n      setBlogText(value);\n    });\n    return () => detach();\n  }, [contentField]);\n\n  const renderCorrectTypeDescription = (type: string) => {\n    switch (type) {\n      case 'one': return (\n          <SingleLineEditor\n              isInitiallyDisabled\n              withCharValidation={false}\n              field={sdk.field}\n              locales={sdk.locales}\n          />\n      );\n      case 'two': return (\n          <>\n              <SingleLineEditor\n                  isInitiallyDisabled\n                  withCharValidation={false}\n                  field={sdk.field}\n                  locales={sdk.locales}\n              />\n              {/*<RadioEditor*/}\n              {/*    isInitiallyDisabled*/}\n              {/*    field={sdk.field}*/}\n              {/*    locales={sdk.locales}*/}\n              {/*/>*/}\n              <MultipleEntryReferenceEditor\n                  viewType=\"link\"\n                  sdk={sdk}\n                  isInitiallyDisabled\n                  hasCardEditActions\n                  parameters={{\n                      instance:  {\n                          showCreateEntityAction: true,\n                          showLinkEntityAction: true\n                      },\n                  }}\n              />\n          </>\n      );\n      default: return null;\n    }\n  }\n  // If you only want to extend Contentful's default editing experience\n  // reuse Contentful's editor components\n  // -> https://www.contentful.com/developers/docs/extensibility/field-editors/\n  // return <Paragraph>Hello Entry Field Component</Paragraph>;\n  return (\n      // <div style={{height: \"500px\"}}>\n      //\n      //   {typeValue && <Paragraph>{renderCorrectTypeDescription(typeValue)}</Paragraph>}\n      //     <Paragraph>{JSON.stringify(sdk.entry.fields['name'])}</Paragraph>\n      // </div>\n    <Paragraph>Hello Entry Field Component</Paragraph>\n  )\n};\n\nexport default Field;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { DialogExtensionSDK } from '@contentful/app-sdk';\n\ninterface DialogProps {\n  sdk: DialogExtensionSDK;\n}\n\nconst Dialog = (props: DialogProps) => {\n  return (\n      <>\n        <Paragraph>Hello Dialog Component</Paragraph>\n        <Paragraph>{JSON.stringify(props)}</Paragraph>\n      </>\n  );\n};\n\nexport default Dialog;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  SidebarExtensionSDK,\n  DialogExtensionSDK,\n  EditorExtensionSDK,\n  PageExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\nimport Page from './components/Page';\nimport Sidebar from './components/Sidebar';\nimport Field from './components/Field';\nimport Dialog from './components/Dialog';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={sdk as AppExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={sdk as FieldExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_EDITOR,\n        component: <EntryEditor sdk={sdk as EditorExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_DIALOG,\n        component: <Dialog sdk={sdk as DialogExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_SIDEBAR,\n        component: <Sidebar sdk={sdk as SidebarExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_PAGE,\n        component: <Page sdk={sdk as PageExtensionSDK} />,\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}